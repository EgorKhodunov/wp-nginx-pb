---
- name: Setup tar on RHEL8 OS
  ansible.builtin.dnf:
    name: tar
    state: present
  when: ansible_os_family == 'RedHat'

- name: Check if /var/www/wordpress exists
  ansible.builtin.stat:
    path: /var/www/wordpress
  register: wp

- name: Download Wordpress
  ansible.builtin.get_url:
    use_proxy: yes
    url: https://wordpress.org/latest.tar.gz
    dest: /var/www/latest.tar.gz
  when: not wp.stat.exists
    
- name: Extract Wordpress
  ansible.builtin.unarchive:
    src: /var/www/latest.tar.gz
    dest: /var/www/
    remote_src: true
    owner: "{{ nginx_user }}"
    group: "{{ nginx_user }}"
    mode: 0750
  when: not wp.stat.exists

- name: Remove wordpress archive
  ansible.builtin.file:
    path: /var/www/latest.tar.gz
    state: absent

- name: Copy sample config file
  ansible.builtin.copy: 
    src: /var/www/wordpress/wp-config-sample.php 
    dest: /var/www/wordpress/wp-config.php
    remote_src: yes
    owner: "{{ nginx_user }}"
    group: "{{ nginx_user }}"
  changed_when: false

- name: Update Wordpress config file
  ansible.builtin.lineinfile:
    path: /var/www/wordpress/wp-config.php
    regexp: "{{item.regexp}}"
    line: "{{item.line}}"
  changed_when: false
  no_log: yes
  with_items:
    - {'regexp': "define\\( 'DB_NAME', '(.)+' \\);", 'line': "define( 'DB_NAME', '{{ mysql_db }}' );"}
    - {'regexp': "define\\( 'DB_USER', '(.)+' \\);", 'line': "define( 'DB_USER', '{{ mysql_user }}' );"}
    - {'regexp': "define\\( 'DB_PASSWORD', '(.)+' \\);", 'line': "define( 'DB_PASSWORD', '{{ mysql_password }}' );"}

